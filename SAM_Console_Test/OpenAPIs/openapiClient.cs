//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using System.Text.Json;
using System.Threading.Tasks;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace SAM_Console_Test
{
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class openapiClient 
    {
        private string _baseUrl = "https://api.sam.gov/";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public openapiClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// get Entity Management Details
        /// </summary>
        /// <param name="api_key"></param>
        /// <param name="duns">DUNS of entity to retrieve</param>
        /// <returns></returns>
        public Task<ApiResponse> GetEntityManagementDataByDunsAsync(string api_key, string duns)
        {
            return GetEntityManagementDataUsingGETAsync(api_key, null, ueiDUNS: duns);
        }

        /// <summary>
        /// get Entity Management Details
        /// </summary>
        /// <param name="api_key"></param>
        /// <param name="q">Formatted query string</param>
        /// <returns></returns>
        public Task<ApiResponse> GetEntityManagementDataUsingQueryAsync(string api_key, string q)
        {
            return GetEntityManagementDataUsingGETAsync(api_key, null, q: q);
        }

        /// <summary>get Entity Management Details</summary>
        /// <param name="api_key">API KEY</param>
        /// <param name="activationDate">A single Date or Date range in the format MM/DD/YYYY</param>
        /// <param name="cageCode">The exact 5 character value; a maximum of up to 100 values can be sent</param>
        /// <param name="dbaName">Partial or Complete value</param>
        /// <param name="entityEFTIndicator">Entity EFT Indicator aka duns4.</param>
        /// <param name="debtSubjectToOffset">Y or N or null</param>
        /// <param name="dodaac">9 character value</param>
        /// <param name="ueiDUNS">Unique Entity Identifier DUNS- 9 digit value; a maximum of up to 100 values can be sent</param>
        /// <param name="ueiSAM">Unique Entity Identifier SAM- 12 character value; a maximum of up to 100 values can be sent (This will replace ueiDUNS)</param>
        /// <param name="entityStructureCode">2 character code or null</param>
        /// <param name="entityStructureDesc">Description or null</param>
        /// <param name="exclusionStatusFlag">D or null</param>
        /// <param name="expirationDate">A single Date or Date range in the format MM/DD/YYYY</param>
        /// <param name="legalBusinessName">Partial or Complete value</param>
        /// <param name="primaryNaics">6 digit NAICS; accepts multiple NAICS</param>
        /// <param name="purposeOfRegistrationCode">2 character code</param>
        /// <param name="purposeOfRegistrationDesc">Description or Null</param>
        /// <param name="registrationDate">A single Date or Date range in the format MM/DD/YYYY</param>
        /// <param name="updateDate">A single Date or Date range in the format MM/DD/YYYY</param>
        /// <param name="physicalAddressCity">City name</param>
        /// <param name="physicalAddressCongressionalDistrict">2 characters</param>
        /// <param name="physicalAddressCountryCode">3 character code</param>
        /// <param name="samExtractCode">1 character code (A or E)</param>
        /// <param name="physicalAddressProvinceOrState">2 character code</param>
        /// <param name="physicalAddressZipPostalCode">5 digit zip code</param>
        /// <param name="businessTypeCode">2 Character business typecodes</param>
        /// <param name="businessTypeDesc">Description or null</param>
        /// <param name="sbaBusinessTypeCode">2 Character business typecodes</param>
        /// <param name="sbaBusinessTypeDesc">Description or null</param>
        /// <param name="entityType">2 Character entity typ codes</param>
        /// <param name="organizationStructureCode">2 Character entity structure codes</param>
        /// <param name="organizationStructureDesc">Entity structure Descriptions</param>
        /// <param name="stateOfIncorporationCode">2 Character state code</param>
        /// <param name="stateOfIncorporationDesc">Description or null</param>
        /// <param name="countryOfIncorporationCode">3 Character country code</param>
        /// <param name="countryOfIncorporationDesc">Description or null</param>
        /// <param name="naicsCode">6 Characters NAICS code</param>
        /// <param name="naicsDesc">Description or null</param>
        /// <param name="naicsLimitedSB">6 Characters NAICS code(with small business - Y)</param>
        /// <param name="pscCode">4 Characters PSC code</param>
        /// <param name="pscDescription">Description or null</param>
        /// <param name="servedDisasterStateCode">Disaster relief served state, 2 character code</param>
        /// <param name="servedDisasterStateName">Name or null</param>
        /// <param name="servedDisasterCountyCode">Disaster relief served county</param>
        /// <param name="servedDisasterCountyName">Name or null</param>
        /// <param name="servedDisasterMSA">Disaster relief served MSA</param>
        /// <param name="edi">Acceptable EDI values are Yes/No</param>
        /// <param name="companySecurityLevel">Company Security Level code</param>
        /// <param name="highestEmployeeSecurityLevel">Highest Employee Security Level Code</param>
        /// <param name="ultimateParentUEIDUNS">Ultimate Parent Unique Entity Identifier DUNS- 9 digit value</param>
        /// <param name="ultimateParentUEISAM">Ultimate Parent Unique Entity Identifier SAM- 12 character value (This will replace ultimateParentUEIDUNS)</param>
        /// <param name="sensitivity">Determines Sensitivity Level of Data</param>
        /// <param name="includeSections">Schema filtering param to filter sections, eg:entityRegistration, coreData, assertions, repsAndCerts, mandatoryPOCs, optionalPOCs</param>
        /// <param name="q">Q paramter for Search Operations</param>
        /// <param name="page">page</param>
        /// <param name="size">record limit per page</param>
        /// <returns>Successfully retrieved list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task<ApiResponse> GetEntityManagementDataUsingGETAsync(string api_key, string activationDate = null, string cageCode = null, string dbaName = null, 
            string entityEFTIndicator = null, string debtSubjectToOffset = null, string dodaac = null, string ueiDUNS = null, string ueiSAM = null, 
            string entityStructureCode = null, 
            string entityStructureDesc = null, string exclusionStatusFlag = null, string expirationDate = null, string legalBusinessName = null, string primaryNaics = null, 
            string purposeOfRegistrationCode = null, string purposeOfRegistrationDesc = null, string registrationDate = null, string updateDate = null, 
            string physicalAddressCity = null, string physicalAddressCongressionalDistrict = null, string physicalAddressCountryCode = null, 
            string samExtractCode = null, string physicalAddressProvinceOrState = null, string physicalAddressZipPostalCode = null, 
            string businessTypeCode = null, string businessTypeDesc = null, string sbaBusinessTypeCode = null, string sbaBusinessTypeDesc = null, 
            string entityType = null, string organizationStructureCode = null, string organizationStructureDesc = null, string stateOfIncorporationCode = null, 
            string stateOfIncorporationDesc = null, string countryOfIncorporationCode = null, string countryOfIncorporationDesc = null, 
            string naicsCode = null, string naicsDesc = null, 
            string naicsLimitedSB = null, string pscCode = null, string pscDescription = null, string servedDisasterStateCode = null, string servedDisasterStateName = null, 
            string servedDisasterCountyCode = null, string servedDisasterCountyName = null, string servedDisasterMSA = null, 
            string edi = null, string companySecurityLevel = null, string highestEmployeeSecurityLevel = null, 
            string ultimateParentUEIDUNS = null, string ultimateParentUEISAM = null, string sensitivity = null, 
            string includeSections = null, string q = null, string page = null, string size = null)
        {
            return GetEntityManagementDataUsingGETAsync(api_key, activationDate, cageCode, dbaName, entityEFTIndicator, debtSubjectToOffset, dodaac, ueiDUNS, ueiSAM, entityStructureCode, entityStructureDesc, exclusionStatusFlag, expirationDate, legalBusinessName, primaryNaics, purposeOfRegistrationCode, purposeOfRegistrationDesc, registrationDate, updateDate, physicalAddressCity, physicalAddressCongressionalDistrict, physicalAddressCountryCode, samExtractCode, physicalAddressProvinceOrState, physicalAddressZipPostalCode, businessTypeCode, businessTypeDesc, sbaBusinessTypeCode, sbaBusinessTypeDesc, entityType, organizationStructureCode, organizationStructureDesc, stateOfIncorporationCode, stateOfIncorporationDesc, countryOfIncorporationCode, countryOfIncorporationDesc, naicsCode, naicsDesc, naicsLimitedSB, pscCode, pscDescription, servedDisasterStateCode, servedDisasterStateName, servedDisasterCountyCode, servedDisasterCountyName, servedDisasterMSA, edi, companySecurityLevel, highestEmployeeSecurityLevel, ultimateParentUEIDUNS, ultimateParentUEISAM, sensitivity, includeSections, q, page, size, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>get Entity Management Details</summary>
        /// <param name="api_key">API KEY</param>
        /// <param name="activationDate">A single Date or Date range in the format MM/DD/YYYY</param>
        /// <param name="cageCode">The exact 5 character value; a maximum of up to 100 values can be sent</param>
        /// <param name="dbaName">Partial or Complete value</param>
        /// <param name="entityEFTIndicator">Entity EFT Indicator aka duns4.</param>
        /// <param name="debtSubjectToOffset">Y or N or null</param>
        /// <param name="dodaac">9 character value</param>
        /// <param name="ueiDUNS">Unique Entity Identifier DUNS- 9 digit value; a maximum of up to 100 values can be sent</param>
        /// <param name="ueiSAM">Unique Entity Identifier SAM- 12 character value; a maximum of up to 100 values can be sent (This will replace ueiDUNS)</param>
        /// <param name="entityStructureCode">2 character code or null</param>
        /// <param name="entityStructureDesc">Description or null</param>
        /// <param name="exclusionStatusFlag">D or null</param>
        /// <param name="expirationDate">A single Date or Date range in the format MM/DD/YYYY</param>
        /// <param name="legalBusinessName">Partial or Complete value</param>
        /// <param name="primaryNaics">6 digit NAICS; accepts multiple NAICS</param>
        /// <param name="purposeOfRegistrationCode">2 character code</param>
        /// <param name="purposeOfRegistrationDesc">Description or Null</param>
        /// <param name="registrationDate">A single Date or Date range in the format MM/DD/YYYY</param>
        /// <param name="updateDate">A single Date or Date range in the format MM/DD/YYYY</param>
        /// <param name="physicalAddressCity">City name</param>
        /// <param name="physicalAddressCongressionalDistrict">2 characters</param>
        /// <param name="physicalAddressCountryCode">3 character code</param>
        /// <param name="samExtractCode">1 character code (A or E)</param>
        /// <param name="physicalAddressProvinceOrState">2 character code</param>
        /// <param name="physicalAddressZipPostalCode">5 digit zip code</param>
        /// <param name="businessTypeCode">2 Character business typecodes</param>
        /// <param name="businessTypeDesc">Description or null</param>
        /// <param name="sbaBusinessTypeCode">2 Character business typecodes</param>
        /// <param name="sbaBusinessTypeDesc">Description or null</param>
        /// <param name="entityType">2 Character entity typ codes</param>
        /// <param name="organizationStructureCode">2 Character entity structure codes</param>
        /// <param name="organizationStructureDesc">Entity structure Descriptions</param>
        /// <param name="stateOfIncorporationCode">2 Character state code</param>
        /// <param name="stateOfIncorporationDesc">Description or null</param>
        /// <param name="countryOfIncorporationCode">3 Character country code</param>
        /// <param name="countryOfIncorporationDesc">Description or null</param>
        /// <param name="naicsCode">6 Characters NAICS code</param>
        /// <param name="naicsDesc">Description or null</param>
        /// <param name="naicsLimitedSB">6 Characters NAICS code(with small business - Y)</param>
        /// <param name="pscCode">4 Characters PSC code</param>
        /// <param name="pscDescription">Description or null</param>
        /// <param name="servedDisasterStateCode">Disaster relief served state, 2 character code</param>
        /// <param name="servedDisasterStateName">Name or null</param>
        /// <param name="servedDisasterCountyCode">Disaster relief served county</param>
        /// <param name="servedDisasterCountyName">Name or null</param>
        /// <param name="servedDisasterMSA">Disaster relief served MSA</param>
        /// <param name="edi">Acceptable EDI values are Yes/No</param>
        /// <param name="companySecurityLevel">Company Security Level code</param>
        /// <param name="highestEmployeeSecurityLevel">Highest Employee Security Level Code</param>
        /// <param name="ultimateParentUEIDUNS">Ultimate Parent Unique Entity Identifier DUNS- 9 digit value</param>
        /// <param name="ultimateParentUEISAM">Ultimate Parent Unique Entity Identifier SAM- 12 character value (This will replace ultimateParentUEIDUNS)</param>
        /// <param name="sensitivity">Determines Sensitivity Level of Data</param>
        /// <param name="includeSections">Schema filtering param to filter sections, eg:entityRegistration, coreData, assertions, repsAndCerts, mandatoryPOCs, optionalPOCs</param>
        /// <param name="q">Q paramter for Search Operations</param>
        /// <param name="page">page</param>
        /// <param name="size">record limit per page</param>
        /// <returns>Successfully retrieved list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task<ApiResponse> GetEntityManagementDataUsingGETAsync(string api_key, string activationDate, string cageCode, string dbaName, string entityEFTIndicator, string debtSubjectToOffset, string dodaac, string ueiDUNS, string ueiSAM, string entityStructureCode, string entityStructureDesc, string exclusionStatusFlag, string expirationDate, string legalBusinessName, string primaryNaics, string purposeOfRegistrationCode, string purposeOfRegistrationDesc, string registrationDate, string updateDate, string physicalAddressCity, string physicalAddressCongressionalDistrict, string physicalAddressCountryCode, string samExtractCode, string physicalAddressProvinceOrState, string physicalAddressZipPostalCode, string businessTypeCode, string businessTypeDesc, string sbaBusinessTypeCode, string sbaBusinessTypeDesc, string entityType, string organizationStructureCode, string organizationStructureDesc, string stateOfIncorporationCode, string stateOfIncorporationDesc, string countryOfIncorporationCode, string countryOfIncorporationDesc, string naicsCode, string naicsDesc, string naicsLimitedSB, string pscCode, string pscDescription, string servedDisasterStateCode, string servedDisasterStateName, string servedDisasterCountyCode, string servedDisasterCountyName, string servedDisasterMSA, string edi, string companySecurityLevel, string highestEmployeeSecurityLevel, string ultimateParentUEIDUNS, string ultimateParentUEISAM, string sensitivity, string includeSections, string q, string page, string size, System.Threading.CancellationToken cancellationToken)
        {
            if (api_key == null)
                throw new System.ArgumentNullException("api_key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/entity-information/v1/entities?");
            urlBuilder_.Append(System.Uri.EscapeDataString("api_key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(api_key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (activationDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("activationDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(activationDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cageCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dbaName != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dbaName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dbaName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entityEFTIndicator != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("entityEFTIndicator") + "=").Append(System.Uri.EscapeDataString(ConvertToString(entityEFTIndicator, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (debtSubjectToOffset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("debtSubjectToOffset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(debtSubjectToOffset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dodaac != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dodaac") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dodaac, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ueiDUNS != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ueiDUNS") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ueiDUNS, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ueiSAM != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ueiSAM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ueiSAM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entityStructureCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("entityStructureCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(entityStructureCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entityStructureDesc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("entityStructureDesc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(entityStructureDesc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exclusionStatusFlag != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("exclusionStatusFlag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exclusionStatusFlag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expirationDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expirationDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(expirationDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (legalBusinessName != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("legalBusinessName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(legalBusinessName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (primaryNaics != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("primaryNaics") + "=").Append(System.Uri.EscapeDataString(ConvertToString(primaryNaics, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (purposeOfRegistrationCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("purposeOfRegistrationCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(purposeOfRegistrationCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (purposeOfRegistrationDesc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("purposeOfRegistrationDesc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(purposeOfRegistrationDesc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (registrationDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("registrationDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(registrationDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (updateDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updateDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(updateDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (physicalAddressCity != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("physicalAddressCity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(physicalAddressCity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (physicalAddressCongressionalDistrict != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("physicalAddressCongressionalDistrict") + "=").Append(System.Uri.EscapeDataString(ConvertToString(physicalAddressCongressionalDistrict, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (physicalAddressCountryCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("physicalAddressCountryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(physicalAddressCountryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (samExtractCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("samExtractCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(samExtractCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (physicalAddressProvinceOrState != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("physicalAddressProvinceOrState") + "=").Append(System.Uri.EscapeDataString(ConvertToString(physicalAddressProvinceOrState, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (physicalAddressZipPostalCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("physicalAddressZipPostalCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(physicalAddressZipPostalCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (businessTypeCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("businessTypeCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(businessTypeCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (businessTypeDesc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("businessTypeDesc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(businessTypeDesc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sbaBusinessTypeCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sbaBusinessTypeCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sbaBusinessTypeCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sbaBusinessTypeDesc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sbaBusinessTypeDesc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sbaBusinessTypeDesc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entityType != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("entityType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(entityType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (organizationStructureCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("organizationStructureCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(organizationStructureCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (organizationStructureDesc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("organizationStructureDesc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(organizationStructureDesc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stateOfIncorporationCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stateOfIncorporationCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stateOfIncorporationCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stateOfIncorporationDesc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stateOfIncorporationDesc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stateOfIncorporationDesc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (countryOfIncorporationCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("countryOfIncorporationCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(countryOfIncorporationCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (countryOfIncorporationDesc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("countryOfIncorporationDesc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(countryOfIncorporationDesc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (naicsCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("naicsCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(naicsCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (naicsDesc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("naicsDesc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(naicsDesc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (naicsLimitedSB != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("naicsLimitedSB") + "=").Append(System.Uri.EscapeDataString(ConvertToString(naicsLimitedSB, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pscCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pscCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pscCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pscDescription != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pscDescription") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pscDescription, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (servedDisasterStateCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("servedDisasterStateCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(servedDisasterStateCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (servedDisasterStateName != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("servedDisasterStateName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(servedDisasterStateName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (servedDisasterCountyCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("servedDisasterCountyCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(servedDisasterCountyCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (servedDisasterCountyName != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("servedDisasterCountyName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(servedDisasterCountyName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (servedDisasterMSA != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("servedDisasterMSA") + "=").Append(System.Uri.EscapeDataString(ConvertToString(servedDisasterMSA, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (edi != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("edi") + "=").Append(System.Uri.EscapeDataString(ConvertToString(edi, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (companySecurityLevel != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("companySecurityLevel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(companySecurityLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (highestEmployeeSecurityLevel != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("highestEmployeeSecurityLevel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(highestEmployeeSecurityLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ultimateParentUEIDUNS != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ultimateParentUEIDUNS") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ultimateParentUEIDUNS, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ultimateParentUEISAM != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ultimateParentUEISAM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ultimateParentUEISAM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sensitivity != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sensitivity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sensitivity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeSections != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeSections") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeSections, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var result = await response_.Content.ReadAsStringAsync();
                            var obj = JsonSerializer.Deserialize<ApiResponse>(result, new JsonSerializerOptions()
                            {
                                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                            });

                            return obj;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Application Level Error Message.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("You are not authorized to view the resource", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("API key is not correct or was not provided", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource you were trying to reach is not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }

            return null;
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108